import dash
from dash import html, dcc
from datetime import datetime as dt
import yfinance as yf
from dash.dependencies import Input, Output, State
from dash.exceptions import PreventUpdate
import pandas as pd
import plotly.graph_objs as go
from model import prediction
from model1 import prediction1
from deep_translator import GoogleTranslator

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–≤—ñ—á–∫–æ–≤–æ–≥–æ –≥—Ä–∞—Ñ—ñ–∫—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –¥–∞–Ω–∏—Ö –ø—Ä–æ —Ü—ñ–Ω–∏ –∞–∫—Ü—ñ–π
def get_stock_price_fig(df):
    fig = go.Figure(data=[go.Candlestick(x=df['Date'],
                                         open=df['Open'],
                                         high=df['High'],
                                         low=df['Low'],
                                         close=df['Close'])])
    fig.update_layout(title="–¶—ñ–Ω–∏ –∞–∫—Ü—ñ–π –≤—ñ–¥–∫—Ä–∏—Ç—è —Ç–∞ –∑–∞–∫—Ä–∏—Ç—è",
                      xaxis_title="–î–∞—Ç–∞",
                      yaxis_title="–¶—ñ–Ω–∞",
                      xaxis_rangeslider_visible=False)
    return fig

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞ –∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
def get_more(df):
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=df['Date'], y=df['Close'], mode='lines', name='–¶—ñ–Ω–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è'))
    fig.add_trace(go.Scatter(x=df['Date'], y=df['Open'], mode='lines', name='–¶—ñ–Ω–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è'))
    fig.update_layout(title="–î–æ–¥–∞—Ç–∫–æ–≤—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏",
                      xaxis_title="–î–∞—Ç–∞",
                      yaxis_title="–¶—ñ–Ω–∞")
    return fig

# –û–≥–æ–ª–æ—à–µ–Ω–Ω—è Dash –¥–æ–¥–∞—Ç–∫—É
app = dash.Dash(
    __name__,
    external_stylesheets=[
        "/assets/style.css"  
    ])
server = app.server

# –û–≥–æ–ª–æ—à–µ–Ω–Ω—è –º–∞–∫–µ—Ç—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏
app.layout = html.Div(
    [
        html.Div(
            [
                html.Nav([
                    html.A("–£–≤—ñ–π—Ç–∏", href="http://localhost:511/–¥–∏–ø–ª–æ–º/interface/log.php", className="login-button"),
                    html.A("–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å", href="http://localhost:511/–¥–∏–ø–ª–æ–º/interface/reg.php", className="reg-button"),
                    html.A("–ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è", href=""),
                    html.A("–ó–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤—è–∑–æ–∫", href="http://localhost:511/–¥–∏–ø–ª–æ–º/interface/cont.php"),
                    html.A("–ì–æ–ª–æ–≤–Ω–∞",href="http://localhost:511/–¥–∏–ø–ª–æ–º/interface/intro.php")
                ], className="navbar"),
                html.P("", className="start"),
                html.Div([
                    html.P("üîò –í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –∞–∫—Ü—ñ—ó: "),
                    html.Div([
                        dcc.Input(id="dropdown_tickers", type="text"),
                        html.Button("–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏", id='submit'),
                    ],
                             className="form")
                ],
                         className="input-place"),
                html.Div([
                    dcc.DatePickerRange(id='my-date-picker-range',
                                        min_date_allowed=dt(1995, 8, 5),
                                        max_date_allowed=dt.now(),
                                        initial_visible_month=dt.now(),
                                        end_date=dt.now().date()),
                ],
                         className="date"),
                html.Div([
                    html.Button(
                        "üìä –¶—ñ–Ω–∞ –∞–∫—Ü—ñ–π", className="stock-btn", id="stock"),
                    html.Button("üìàüìâ –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏",
                                className="indicators-btn",
                                id="indicators"),
                    dcc.Input(id="n_days",
                              type="text",
                              placeholder="–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤"),
                    html.Button(
                        "üïµÔ∏è‚Äç‚ôÄÔ∏è –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞–∫—Ä–∏—Ç—Ç—è", className="forecast-btn", id="forecast"),
                    html.Button(
                        "üïµÔ∏è‚Äç‚ôÄÔ∏è –ü—Ä–æ–≥–Ω–æ–∑ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è", className="forecast-open-btn", id="forecast_open")
                ],
                         className="buttons"),
            ],
            className="nav"),

        # –í–º—ñ—Å—Ç
        html.Div(
            [
                html.Div(
                    [  # –•–µ–¥–µ—Ä
                        html.Img(id="logo"),
                        html.P(id="ticker")
                    ],
                    className="header"),
                html.Div(id="description", className="decription_ticker"),
                html.Div([], id="graphs-content"),
                html.Div([], id="main-content"),
                html.Div([], id="forecast-content"),
                html.Div([], id="forecast-open-content")
            ],
            className="content"),
    ],
    className="container")

# Callback –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ–º–ø–∞–Ω—ñ—é
@app.callback([
    Output("description", "children"),
    Output("logo", "src"),
    Output("ticker", "children"),
    Output("stock", "n_clicks"),
    Output("indicators", "n_clicks"),
    Output("forecast", "n_clicks"),
    Output("forecast_open", "n_clicks")
], [Input("submit", "n_clicks")], [State("dropdown_tickers", "value")])
def update_data(n, val):
    if n is None:
        return ("", 
                "https://usp-ltd.org/wp-content/uploads/2022/01/kak_nahodit_akcii_dlya_vnutridnevnoy_torgovli._rabota_s_filtrami_finviz._chast_4.jpg", 
                "–ü—Ä–æ–≥–Ω–æ–∑ —ñ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ç–æ—Ä –∞–∫—Ü—ñ–π", None, None, None, None)
    if val is None:
        raise PreventUpdate
    else:
        ticker = yf.Ticker(val)
        inf = ticker.info
        df = pd.DataFrame().from_dict(inf, orient="index").T
        
        # –í–∏—Ç—è–≥–Ω—É—Ç–∏ —Ç–µ–∫—Å—Ç–∏ –∑ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º—É
        long_business_summary = df['longBusinessSummary'].values[0]
        logo_url = df['logo_url'].values[0] if 'logo_url' in df.columns else "https://usp-ltd.org/wp-content/uploads/2022/01/kak_nahodit_akcii_dlya_vnutridnevnoy_torgovli._rabota_s_filtrami_finviz._chast_4.jpg"
        short_name = df['shortName'].values[0]
        
        # –ü–µ—Ä–µ–∫–ª–∞–¥ —Ç–µ–∫—Å—Ç—É –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é deep_translator
        translated_summary = GoogleTranslator(source='auto', target='uk').translate(long_business_summary)
        
        return translated_summary, logo_url, short_name, None, None, None, None

# Callback –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –∞–∫—Ü—ñ–π —É –≤–∏–≥–ª—è–¥—ñ —Å–≤—ñ—á–æ–∫
@app.callback([
    Output("graphs-content", "children"),
], [
    Input("stock", "n_clicks"),
    Input('my-date-picker-range', 'start_date'),
    Input('my-date-picker-range', 'end_date')
], [State("dropdown_tickers", "value")])
def stock_price(n, start_date, end_date, val):
    if n is None or val is None:
        raise PreventUpdate
    try:
        df = yf.download(val, start=start_date, end=end_date) if start_date else yf.download(val)
        if df.empty:
            return [html.Div("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥.")]
        df.reset_index(inplace=True)
        fig = get_stock_price_fig(df)
        return [dcc.Graph(figure=fig)]
    except yf.YFInvalidPeriodError as e:
        return [html.Div(f"–ü–æ–º–∏–ª–∫–∞: {str(e)}")]

# Callback –¥–ª—è —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤
@app.callback([Output("main-content", "children")], [
    Input("indicators", "n_clicks"),
    Input('my-date-picker-range', 'start_date'),
    Input('my-date-picker-range', 'end_date')
], [State("dropdown_tickers", "value")])
def indicators(n, start_date, end_date, val):
    if n is None or val is None:
        raise PreventUpdate
    try:
        df_more = yf.download(val, start=start_date, end=end_date) if start_date else yf.download(val)
        if df_more.empty:
            return [html.Div("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥.")]
        df_more.reset_index(inplace=True)
        fig = get_more(df_more)
        return [dcc.Graph(figure=fig)]
    except yf.YFInvalidPeriodError as e:
        return [html.Div(f"–ü–æ–º–∏–ª–∫–∞: {str(e)}")]

# Callback –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É –∑–∞–∫—Ä–∏—Ç—Ç—è
@app.callback([Output("forecast-content", "children")],
              [Input("forecast", "n_clicks")],
              [State("n_days", "value"),
               State("dropdown_tickers", "value")])
def forecast(n, n_days, val):
    if n is None or val is None or not n_days.isdigit():
        raise PreventUpdate
    try:
        fig = prediction(val, int(n_days) + 1)
        if fig is None:
            return [html.Div("–ü–æ–º–∏–ª–∫–∞: –ù–µ–º–æ–∂–ª–∏–≤–æ –∑—Ä–æ–±–∏—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑.")]
        return [dcc.Graph(figure=fig)]
    except ValueError as e:
        return [html.Div(f"–ü–æ–º–∏–ª–∫–∞: {str(e)}")]
    except Exception as e:
        return [html.Div(f"–ù–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}")]

# Callback –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è
@app.callback([Output("forecast-open-content", "children")],
                            [Input("forecast_open", "n_clicks")],
              [State("n_days", "value"),
               State("dropdown_tickers", "value")])
def forecast_open(n, n_days, val):
    if n is None or val is None or not n_days.isdigit():
        raise PreventUpdate
    try:
        fig = prediction1(val, int(n_days) + 1)
        if fig is None:
            return [html.Div("–ü–æ–º–∏–ª–∫–∞: –ù–µ–º–æ–∂–ª–∏–≤–æ –∑—Ä–æ–±–∏—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑.")]
        return [dcc.Graph(figure=fig)]
    except ValueError as e:
        return [html.Div(f"–ü–æ–º–∏–ª–∫–∞: {str(e)}")]
    except Exception as e:
        return [html.Div(f"–ù–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}")]

if __name__ == '__main__':
    app.run_server(port=8050, debug=True)
     
